<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\Newtonsoft.Json.12.0.2\lib\net45\Newtonsoft.Json.dll" #>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json"#>
<#@ import namespace="Newtonsoft.Json.Linq"#>
<#@ output extension=".cs" #>
<# 
	string jsonFile = string.Format ("{0}{1}.json", Host.ResolveAssemblyReference ("$(ProjectDir)"), Host.ResolveAssemblyReference ("$(TargetName)"));
	JObject root = null;
	if (File.Exists (jsonFile) == true)
	{
		using(JsonTextReader reader = new JsonTextReader (new StreamReader (File.OpenRead (jsonFile), Encoding.UTF8)))
		{
			root = JObject.Load (reader);
		}
	}
#>
/*
 *	此代码由 T4 引擎根据 LibExport.tt 模板生成, 若您不了解以下代码的用处, 请勿修改!
 *	
 *	此文件包含项目 Json 文件的事件导出函数.
 */
using System;
using System.Runtime.InteropServices;
using System.Text;
using Native.Csharp.App.Event;
using Native.Csharp.App.EventArgs;
using Native.Csharp.App.Interface;
using Native.Csharp.Sdk.Cqp;
using Native.Csharp.Sdk.Cqp.Model;
using Native.Csharp.Sdk.Cqp.Other;
using Unity;

namespace Native.Csharp.App.Core
{
    public class LibExport
    {
		#region --字段--
		private static Encoding _defaultEncoding = null;
		#endregion

		#region --构造函数--
		/// <summary>
		/// 静态构造函数, 注册依赖注入回调
		/// </summary>
		static LibExport ()
		{
			_defaultEncoding = Encoding.GetEncoding ("GB18030");
			
			// 初始化 Costura.Fody
			CosturaUtility.Initialize ();
			
			// 初始化依赖注入容器
			Common.UnityContainer = new UnityContainer ();

			// 程序开始调用方法进行注册
			Event_AppMain.Registbackcall (Common.UnityContainer);

			// 注册完毕调用方法进行分发
			Event_AppMain.Resolvebackcall (Common.UnityContainer);

			// 分发应用内事件
			ResolveAppbackcall ();
		}
		#endregion
		
		#region --核心方法--
		/// <summary>
		/// 返回 AppID 与 ApiVer, 本方法在模板运行后会根据项目名称自动填写 AppID 与 ApiVer
		/// </summary>
		/// <returns></returns>
		[DllExport (ExportName = "AppInfo", CallingConvention = CallingConvention.StdCall)]
		private static string AppInfo ()
		{
			// 请勿随意修改
			// 
			Common.AppName = "<#=		GetAppName (root) #>";
			Common.AppVersion = Version.Parse ("<#=		GetVersion (root) #>");		

			//
			// 当前项目名称: <#=		Host.ResolveAssemblyReference ("$(TargetName)") #>
			// Api版本: 9

			return string.Format ("{0},{1}", 9, "<#=		Host.ResolveAssemblyReference ("$(TargetName)") #>");
		}

		/// <summary>
		/// 接收插件 AutoCode, 注册异常
		/// </summary>
		/// <param name="authCode"></param>
		/// <returns></returns>
		[DllExport (ExportName = "Initialize", CallingConvention = CallingConvention.StdCall)]
		private static int Initialize (int authCode)
		{
			// 酷Q获取应用信息后，如果接受该应用，将会调用这个函数并传递AuthCode。
			Common.CqApi = new CqApi (authCode);

			// AuthCode 传递完毕后将对象加入容器托管, 以便在其它项目中调用
			Common.UnityContainer.RegisterInstance<CqApi> (Common.CqApi);

			// 注册插件全局异常捕获回调, 用于捕获未处理的异常, 回弹给 酷Q 做处理
			AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;

			// 本函数【禁止】处理其他任何代码，以免发生异常情况。如需执行初始化代码请在Startup事件中执行（Type=1001）。
			return 0;
		}
		#endregion
		
		#region --私有方法--
		/// <summary>
		/// 全局异常捕获, 用于捕获开发者未处理的异常, 此异常将回弹至酷Q进行处理
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private static void CurrentDomain_UnhandledException (object sender, UnhandledExceptionEventArgs e)
		{
			Exception ex = e.ExceptionObject as Exception;
			if (ex != null)
			{
				StringBuilder innerLog = new StringBuilder ();
				innerLog.AppendLine ("发现未处理的异常!");
				innerLog.AppendLine ("异常堆栈：");
				innerLog.AppendLine (ex.ToString ());
				Common.CqApi.AddFatalError (innerLog.ToString ());      //将未经处理的异常弹回酷Q做处理
			}
		}
		
		/// <summary>
		/// 获取所有的注入项, 分发到对应的事件
		/// </summary>
		private static void ResolveAppbackcall ()
		{
<#
	if (root != null && root.ContainsKey ("event"))
	{
		JArray events = root.Value<JArray> ("event");
#>
<#=			GetResolveList (events) #>
<#
	}
#>
		}
		#endregion
		
		#region --导出方法--
<#
	if (root != null && root.ContainsKey ("event"))
	{
		JArray events = root.Value<JArray> ("event");
#>
<#=			GetExportList (events) #>
<#		
	}
 #>
		#endregion
    }
}

<#+
	public string GetAppName (JObject root)
	{
		if (root != null)
		{
			try
			{
				return root["name"].Value<string> ();
			}
			catch {	}
		}
		return "解析失败";
	}
 #>
<#+
	public string GetVersion (JObject root)
	{
		if (root != null)
		{
			try
			{
				return root["version"].Value<string> ();
			}
			catch { }
		}
		return "0.0.0";
	}
 #>
<#+
	public string GetExportList (JArray events)
	{
		StringBuilder temp = new StringBuilder ();
		if (events != null)
		{
			foreach (JToken token in events)
			{
				temp.AppendLine ("\t\t/*");
				temp.AppendLine (string.Format ("\t\t * Id: {0}", token["id"].Value<int> ()));
				temp.AppendLine (string.Format ("\t\t * Type: {0}", token["type"].Value<int> ()));
				temp.AppendLine (string.Format ("\t\t * Name: {0}", token["name"].Value<string> ()));
				temp.AppendLine (string.Format ("\t\t * Function: {0}", token["function"].Value<string> ()));
				temp.AppendLine ("\t\t */");
				switch (token["type"].Value<int> ())
				{
					case 1001:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqStartupEventArgs> CqStartup_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} ()", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tif (CqStartup_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tCqStartup_{0} (null, new CqStartupEventArgs ({0}));", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn 0;");
						temp.AppendLine ("\t\t}");
						break;
					case 1002:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqExitEventArgs> CqExit_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} ()", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tif (CqExit_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tCqExit_{0} (null, new CqExitEventArgs ({0}));", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn 0;");
						temp.AppendLine ("\t\t}");
						break;
					case 1003:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqAppEnableEventArgs> AppEnable_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} ()", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tif (AppEnable_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tAppEnable_{0} (null, new CqAppEnableEventArgs ({0}));", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn 0;");
						temp.AppendLine ("\t\t}");
						break;
					case 1004:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqAppDisableEventArgs> AppDisable_{0};", token["id"].Value<int> ()));
		
						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} ()", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tif (AppDisable_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tAppDisable_{0} (null, new CqAppDisableEventArgs ({0}));", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn 0;");
						temp.AppendLine ("\t\t}");
						break;
					case 21:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqPrivateMessageEventArgs> ReceiveFriendMessage_{0};", token["id"].Value<int> ()));
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqPrivateMessageEventArgs> ReceiveOnlineStatusMessage_{0};", token["id"].Value<int> ()));
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqPrivateMessageEventArgs> ReceiveGroupPrivateMessage_{0};", token["id"].Value<int> ()));
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqPrivateMessageEventArgs> ReceiveDiscussPrivateMessage_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int msgId, long fromQQ, IntPtr msg, int font)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tif (ReceiveFriendMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tCqPrivateMessageEventArgs args = new CqPrivateMessageEventArgs (1, msgId, fromQQ, msg.ToString (_defaultEncoding));"));
						temp.AppendLine ("\t\t\t\tif (subType == 11)");
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tif (ReceiveFriendMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\t\tReceiveFriendMessage_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t}");
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t\telse if (subType == 1)");
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tif (ReceiveOnlineStatusMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\t\tReceiveOnlineStatusMessage_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t}");
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t\telse if (subType == 2)");
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tif (ReceiveGroupPrivateMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\t\tReceiveGroupPrivateMessage_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t}");
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t\telse if (subType == 3)");
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tif (ReceiveDiscussPrivateMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\t\tReceiveDiscussPrivateMessage_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t\t}");
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn -1;");
						temp.AppendLine ("\t\t}");
						break;
					case 2:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupMessageEventArgs> ReceiveGroupMessage_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int msgId, long fromGroup, long fromQQ, string fromAnonymous, IntPtr msg, int font)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine ("\t\t\tGroupAnonymous anonymous = null;");
						temp.AppendLine ("\t\t\tif (fromQQ == 80000000 && !string.IsNullOrEmpty (fromAnonymous))");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine ("\t\t\t\tanonymous = Common.CqApi.GetAnonymous (fromAnonymous);");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tCqGroupMessageEventArgs args = new CqGroupMessageEventArgs ({0}, msgId, fromGroup, fromQQ, anonymous, msg.ToString (_defaultEncoding));", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveGroupMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveGroupMessage_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 4:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqDiscussMessageEventArgs> ReceiveDiscussMessage_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int msgId, long fromDiscuss, long fromQQ, IntPtr msg, int font)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqDiscussMessageEventArgs args = new CqDiscussMessageEventArgs ({0}, msgId, fromDiscuss, fromQQ, msg.ToString (_defaultEncoding));", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveDiscussMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveDiscussMessage_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 11:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupFileUploadEventArgs> ReceiveFileUploadMessage_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int sendTime, long fromGroup, long fromQQ, string file)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqGroupFileUploadEventArgs args = new CqGroupFileUploadEventArgs ({0}, sendTime.ToDateTime (), fromGroup, fromQQ, Common.CqApi.GetFile (file));", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveFileUploadMessage_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveFileUploadMessage_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 101:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupManageChangeEventArgs> ReceiveManageIncrease_{0};", token["id"].Value<int> ()));
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupManageChangeEventArgs> ReceiveManageDecrease_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int sendTime, long fromGroup, long beingOperateQQ)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqGroupManageChangeEventArgs args = new CqGroupManageChangeEventArgs ({0}, sendTime.ToDateTime (), fromGroup, beingOperateQQ);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveManageDecrease_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveManageDecrease_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\telse if (subType == 2)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveManageIncrease_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveManageIncrease_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 102:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupMemberDecreaseEventArgs> ReceiveMemberLeave_{0};", token["id"].Value<int> ()));
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupMemberDecreaseEventArgs> ReceiveMemberRemove_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int sendTime, long fromGroup, long fromQQ, long beingOperateQQ)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqGroupMemberDecreaseEventArgs args = new CqGroupMemberDecreaseEventArgs ({0}, sendTime.ToDateTime (), fromGroup, fromQQ, beingOperateQQ);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveMemberLeave_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveMemberLeave_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\telse if (subType == 2)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveMemberRemove_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveMemberRemove_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 103:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupMemberIncreaseEventArgs> ReceiveMemberPass_{0};", token["id"].Value<int> ()));
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqGroupMemberIncreaseEventArgs> ReceiveMemberBeInvitee_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int sendTime, long fromGroup, long fromQQ, long beingOperateQQ)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqGroupMemberIncreaseEventArgs args = new CqGroupMemberIncreaseEventArgs ({0}, sendTime.ToDateTime (), fromGroup, fromQQ, beingOperateQQ);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveMemberPass_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveMemberPass_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\telse if (subType == 2)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveMemberBeInvitee_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveMemberBeInvitee_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 201:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqFriendIncreaseEventArgs> ReceiveFriendIncrease_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int sendTime, long fromQQ)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqFriendIncreaseEventArgs args = new CqFriendIncreaseEventArgs ({0}, sendTime.ToDateTime (), fromQQ);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveFriendIncrease_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveFriendIncrease_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 301:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqAddFriendRequestEventArgs> ReceiveFriendAdd_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int sendTime, long fromQQ, IntPtr msg, string responseFlag)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqAddFriendRequestEventArgs args = new CqAddFriendRequestEventArgs ({0}, sendTime.ToDateTime (), fromQQ, msg.ToString (_defaultEncoding), responseFlag);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveFriendAdd_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveFriendAdd_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
					case 302:
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqAddGroupRequestEventArgs> ReceiveAddGroupRequest_{0};", token["id"].Value<int> ()));
						temp.AppendLine (string.Format ("\t\tpublic static event EventHandler<CqAddGroupRequestEventArgs> ReceiveAddGroupBeInvitee_{0};", token["id"].Value<int> ()));

						temp.AppendLine (string.Format ("\t\t[DllExport (ExportName = \"{0}\", CallingConvention = CallingConvention.StdCall)]", token["function"].Value<string> ()));
						temp.AppendLine (string.Format ("\t\tprivate static int Evnet_{0} (int subType, int sendTime, long fromGroup, long fromQQ, IntPtr msg, string responseFlag)", token["function"].Value<string> ()));
						temp.AppendLine ("\t\t{");
						temp.AppendLine (string.Format ("\t\t\tCqAddGroupRequestEventArgs args = new CqAddGroupRequestEventArgs ({0}, sendTime.ToDateTime (), fromGroup, fromQQ, msg.ToString (_defaultEncoding), responseFlag);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\tif (subType == 1)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveAddGroupRequest_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveAddGroupRequest_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\telse if (subType == 2)");
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tif (ReceiveAddGroupBeInvitee_{0} != null)", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\t\tReceiveAddGroupBeInvitee_{0} (null, args);", token["id"].Value<int> ()));
						temp.AppendLine ("\t\t\t\t}");
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine ("\t\t\treturn Convert.ToInt32 (args.Handler);");
						temp.AppendLine ("\t\t}");
						break;
				}
				temp.AppendLine ();
			}
		}
		else 
		{
			temp.Append ("\t\t// 项目文件解析失败");
		}
		return temp.ToString ();
	}
 #>
<#+
	public string GetResolveList (JArray events)
	{
		StringBuilder temp = new StringBuilder ();
		if (events != null)
		{
			foreach (JToken token in events)
			{
				temp.AppendLine ("\t\t\t/*");
				temp.AppendLine (string.Format ("\t\t\t * Id: {0}", token["id"].Value<int> ()));
				temp.AppendLine (string.Format ("\t\t\t * Name: {0}", token["name"].Value<string> ()));
				temp.AppendLine ("\t\t\t */");
				switch (token["type"].Value<int> ())
				{
					case 1001:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<ICqStartup> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tCqStartup_{0} = Common.UnityContainer.Resolve<ICqStartup> (\"{1}\").CqStartup;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 1002:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<ICqExit> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tCqExit_{0} = Common.UnityContainer.Resolve<ICqExit> (\"{1}\").CqExit;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 1003:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<ICqAppEnable> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tAppEnable_{0} = Common.UnityContainer.Resolve<ICqAppEnable> (\"{1}\").CqAppEnable;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 1004:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<ICqAppDisable> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tAppDisable_{0} = Common.UnityContainer.Resolve<ICqAppDisable> (\"{1}\").CqAppDisable;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 21:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveFriendMessage> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveFriendMessage_{0} = Common.UnityContainer.Resolve<IReceiveFriendMessage> (\"{1}\").ReceiveFriendMessage;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveOnlineStatusMessage> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveOnlineStatusMessage_{0} = Common.UnityContainer.Resolve<IReceiveOnlineStatusMessage> (\"{1}\").ReceiveOnlineStatusMessage;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupPrivateMessage> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveGroupPrivateMessage_{0} = Common.UnityContainer.Resolve<IReceiveGroupPrivateMessage> (\"{1}\").ReceiveGroupPrivateMessage;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveDiscussPrivateMessage> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveDiscussPrivateMessage_{0} = Common.UnityContainer.Resolve<IReceiveDiscussPrivateMessage> (\"{1}\").ReceiveDiscussPrivateMessage;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 2:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupMessage> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveGroupMessage_{0} = Common.UnityContainer.Resolve<IReceiveGroupMessage> (\"{1}\").ReceiveGroupMessage;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 4:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveDiscussMessage> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveDiscussMessage_{0} = Common.UnityContainer.Resolve<IReceiveDiscussMessage> (\"{1}\").ReceiveDiscussMessage;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 11:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupFileUpload> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveFileUploadMessage_{0} = Common.UnityContainer.Resolve<IReceiveGroupFileUpload> (\"{1}\").ReceiveGroupFileUpload;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 101:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupManageIncrease> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveManageIncrease_{0} = Common.UnityContainer.Resolve<IReceiveGroupManageIncrease> (\"{1}\").ReceiveGroupManageIncrease;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupManageDecrease> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveManageDecrease_{0} = Common.UnityContainer.Resolve<IReceiveGroupManageDecrease> (\"{1}\").ReceiveGroupManageDecrease;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 102:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupMemberLeave> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveMemberLeave_{0} = Common.UnityContainer.Resolve<IReceiveGroupMemberLeave> (\"{1}\").ReceiveGroupMemberLeave;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupMemberRemove> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveMemberRemove_{0} = Common.UnityContainer.Resolve<IReceiveGroupMemberRemove> (\"{1}\").ReceiveGroupMemberRemove;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 103:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupMemberPass> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveMemberPass_{0} = Common.UnityContainer.Resolve<IReceiveGroupMemberPass> (\"{1}\").ReceiveGroupMemberPass;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveGroupMemberBeInvitee> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveMemberBeInvitee_{0} = Common.UnityContainer.Resolve<IReceiveGroupMemberBeInvitee> (\"{1}\").ReceiveGroupMemberBeInvitee;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 201:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveFriendIncrease> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveFriendIncrease_{0} = Common.UnityContainer.Resolve<IReceiveFriendIncrease> (\"{1}\").ReceiveFriendIncrease;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 301:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveFriendAddRequest> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveFriendAdd_{0} = Common.UnityContainer.Resolve<IReceiveFriendAddRequest> (\"{1}\").ReceiveFriendAddRequest;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
					case 302:
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveAddGroupRequest> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");
						temp.AppendLine (string.Format ("\t\t\t\tReceiveAddGroupRequest_{0} = Common.UnityContainer.Resolve<IReceiveAddGroupRequest> (\"{1}\").ReceiveAddGroupRequest;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						temp.AppendLine (string.Format ("\t\t\tif (Common.UnityContainer.IsRegistered<IReceiveAddGroupBeInvitee> (\"{0}\") == true)", token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t{");				
						temp.AppendLine (string.Format ("\t\t\t\tReceiveAddGroupBeInvitee_{0} = Common.UnityContainer.Resolve<IReceiveAddGroupBeInvitee> (\"{1}\").ReceiveAddGroupBeInvitee;", token["id"].Value<int> (), token["name"].Value<string> ()));
						temp.AppendLine ("\t\t\t}");
						break;
				}
				temp.AppendLine ("\t\t\t");
			}
		}
		else 
		{
			temp.Append ("\t\t\t// 项目文件解析失败");
		}
		return temp.ToString ();
	}
 #>
